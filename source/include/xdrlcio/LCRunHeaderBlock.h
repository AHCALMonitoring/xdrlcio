  /// \file LCRunHeaderBlock.h
/*
 *
 * LCRunHeaderBlock.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LCRUNHEADERBLOCK_H
#define LCRUNHEADERBLOCK_H

// -- xdrstream headers
#include "xdrstream/xdrstream.h"

// -- lcio headers
#include "EVENT/LCRunHeader.h"
#include "IOIMPL/LCRunHeaderIOImpl.h"

namespace xdrlcio
{

class LCRunHeaderBlock;

class XdrLCRunHeader : public IOIMPL::LCRunHeaderIOImpl
{
	friend class LCRunHeaderBlock;
};

/** 
 * @brief LCRunHeaderBlock class
 */ 
class LCRunHeaderBlock : public xdrstream::Block
{
public:
	/**
	 *  @brief  Constructor
	 */
	LCRunHeaderBlock(xdrstream::XdrStream *pXdrStream, const std::string &name);

	/**
	 *  @brief  Destructor
	 */
	~LCRunHeaderBlock() { /* nop */ }

	/**
	 *  @brief  Perform read / write operation
	 */
	xdrstream::Status stream(xdrstream::StreamingMode mode, xdrstream::IODevice *pDevice, xdrstream::xdr_version_t version);

	/**
	 *  @brief  Get the block version. Written in the device
	 */
	xdrstream::xdr_version_t getVersion() const;

	/**
	 *
	 */
	void setRunHeader(const EVENT::LCRunHeader *pLCRunHeader);

	/**
	 *
	 */
	void setRunHeaderPtr(XdrLCRunHeader **pLCRunHeaderPtr);

private:
	const EVENT::LCRunHeader             *m_pLCRunHeader;
	XdrLCRunHeader                      **m_pLCRunHeaderPtr;
}; 

} 

#endif  //  LCRUNHEADERBLOCK_H
