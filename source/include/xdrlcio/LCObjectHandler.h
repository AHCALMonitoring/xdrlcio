  /// \file LCObjectHandler.h
/*
 *
 * LCObjectHandler.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LCOBJECTHANDLER_H
#define LCOBJECTHANDLER_H

// -- xdrstream headers
#include "xdrstream/xdrstream.h"

// -- lcio headers
#include "EVENT/LCObject.h"
#include "EVENT/LCCollection.h"

namespace xdrlcio
{

/** 
 * @brief LCObjectHandler class
 */ 
class LCObjectHandler 
{
public:
	/**
	 *  @brief Destructor
	 */
	virtual ~LCObjectHandler() { /* nop */ }

	/**
	 *  @brief  Reads lcio objects from an XDR device.
	 */
	virtual xdrstream::Status read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject) = 0;

	/**
	 *  @brief  Writes lcio objects to an SIO stream.
	 */
	virtual xdrstream::Status write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject) = 0;

	/**
	 *  @brief  Initialize the handler and/or the collection.
	 *           Read/write the flag and the parameters.
	 *           Overwrite for classes that need specific processing.
	 */
	virtual xdrstream::Status init(xdrstream::IODevice *pDevice,
			xdrstream::StreamingMode mode,
			EVENT::LCCollection *pLCCollection,
			xdrstream::xdr_version_t version);


	/**
	 *  @brief  Calls read() if the collection is not a subset otherwise only reads the pointers.
	 */
	virtual xdrstream::Status readBase(xdrstream::IODevice *pDevice,
			EVENT::LCObject *&pLCObject);


	/**
	 *  @brief  Calls write() if the collection is not a subset otherwise only writes the pointers.
	 */
	virtual xdrstream::Status writeBase(xdrstream::IODevice *pDevice,
			const EVENT::LCObject *const pLCObject);

protected:
	uint32_t                        m_lcFlag;
	xdrstream::xdr_version_t        m_version;
}; 

} 

#endif  //  LCOBJECTHANDLER_H
