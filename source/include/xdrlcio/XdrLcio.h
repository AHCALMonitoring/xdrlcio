  /// \file XdrLcio.h
/*
 *
 * XdrLcio.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef XDRLCIO_H
#define XDRLCIO_H

#include "xdrstream/xdrstream.h"

#include "EVENT/LCEvent.h"
#include "EVENT/LCRunHeader.h"
#include "IO/LCEventListener.h"
#include "IO/LCRunListener.h"

namespace xdrlcio
{

/** 
 * @brief XdrLcio class
 */ 
class XdrLcio 
{
public:
	/**
	 *  @brief  Constructor
	 */
	XdrLcio();

	/**
	 *  @brief  Destructor
	 */
	~XdrLcio();

	/**
	 *  @brief
	 */
	xdrstream::Status writeEvent(const EVENT::LCEvent *const pLCEvent, xdrstream::IODevice *const pDevice);

	/**
	 *  @brief
	 */
	xdrstream::Status readNextEvent(EVENT::LCEvent *&pEvent, xdrstream::IODevice *const pDevice);

	/**
	 *  @brief
	 */
	xdrstream::Status skipNEvents(unsigned int nSKipEvents);

	/**
	 *  @brief
	 */
	xdrstream::Status readDevice(xdrstream::IODevice *const pDevice);

	/**
	 *  @brief
	 */
	xdrstream::Status readDevice(xdrstream::IODevice *const pDevice, unsigned int nMaxEvent);

	/**
	 *  @brief
	 */
	void addLCEventListener(IO::LCEventListener *pListener);

	/**
	 *  @brief
	 */
	void removeLCEventListener(IO::LCEventListener *pListener);

	/**
	 *  @brief
	 */
	void addLCRunListener(IO::LCRunListener *pListener);

	/**
	 *  @brief
	 */
	void removeLCRunListener(IO::LCRunListener *pListener);

	/**
	 *  @brief
	 */
	xdrstream::XdrStream *getXdrStream() const;

	/**
	 *  @brief
	 */
	static xdrstream::XdrStream *createBaseXdrStream();

protected:

	xdrstream::XdrStream                  *m_pXdrStream;
	std::set<IO::LCEventListener *>        m_eventListeners;
	std::set<IO::LCRunListener *>          m_runListeners;
}; 

} 

#endif  //  XDRLCIO_H
