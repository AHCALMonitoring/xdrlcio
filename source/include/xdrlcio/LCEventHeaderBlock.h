  /// \file LCEventHeaderBlock.h
/*
 *
 * LCEventHeaderBlock.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LCEVENTHEADERBLOCK_H
#define LCEVENTHEADERBLOCK_H

#include "xdrstream/xdrstream.h"

#include "EVENT/LCEvent.h"
#include "IOIMPL/LCEventIOImpl.h"

namespace xdrlcio
{

class LCEventHeaderBlock;

class XdrLCEvent : public IOIMPL::LCEventIOImpl
{
	friend class LCEventHeaderBlock;
};

/** 
 * @brief LCEventHeaderBlock class
 */ 
class LCEventHeaderBlock : public xdrstream::Block
{
public:
	/**
	 * @brief Ctor
	 */
	LCEventHeaderBlock(xdrstream::XdrStream *pXdrStream, const std::string &name);

	/**
	 * @brief Dtor
	 */
	virtual ~LCEventHeaderBlock();

	/**
	 *  @brief  Perform read / write operation
	 */
	xdrstream::Status stream(xdrstream::StreamingMode mode, xdrstream::IODevice *pDevice, xdrstream::xdr_version_t version);

	/**
	 *  @brief  Get the block version. Written in the device
	 */
	xdrstream::xdr_version_t getVersion() const;

	/**
	 *
	 */
	void setEvent(const EVENT::LCEvent *pEvent);

	/**
	 *
	 */
	void setEventPtr(XdrLCEvent **pEventPtr);

	/**
	 *
	 */
	void setReadCollectionNames(const std::vector<std::string> &collectionNames);

private:
	const EVENT::LCEvent                     *m_pLCEvent;
	XdrLCEvent                              **m_pLCEventPtr;
	std::set<std::string>                     m_readCollectionNames;
}; 

} 

#endif  //  LCEVENTHEADERBLOCK_H
