  /// \file LCStlVecHandler.h
/*
 *
 * LCStlVecHandler.h header template automatically generated by a class generator
 * Creation date : sam. fï¿½vr. 20 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LCSTLVECHANDLER_H
#define LCSTLVECHANDLER_H

#include "xdrlcio/LCObjectHandler.h"


#include "xdrstream/IODevice.h"


#include "EVENT/LCFloatVec.h"
#include "EVENT/LCIntVec.h"
#include "EVENT/LCStrVec.h"

namespace xdrlcio
{

/** 
 *  @brief  LCStlVecHandler class
 */
template <typename T, typename LCType>
class LCStlVecHandler : public LCObjectHandler
{
public:
	/**
	 *  @brief  Destructor
	 */
	~LCStlVecHandler() { /* nop */ }

	/**
	 *  @brief  Reads calo hit objects from an XDR device.
	 */
	xdrstream::Status read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject);

	/**
	 *  @brief  Writes calo hit objects to an SIO stream.
	 */
	xdrstream::Status write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject);
};

typedef LCStlVecHandler<float, EVENT::LCFloatVec>      LCFloatVecHandler;
typedef LCStlVecHandler<int32_t, EVENT::LCIntVec>      LCIntVecHandler;
typedef LCStlVecHandler<std::string, EVENT::LCStrVec>  LCStrVecHandler;

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

template <typename T, typename LCType>
inline xdrstream::Status LCStlVecHandler<T, LCType>::read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject)
{
	LCType *pLCStlVec = new LCType();
	pLCObject = pLCStlVec;

	uint32_t nVals = 0;
	XDR_STREAM( pDevice->read( & nVals ) )

	T value;

	for( uint32_t i=0 ; i<nVals ; i++ )
	{
		XDR_STREAM( pDevice->read( & value ) )
		pLCStlVec->push_back( value );
	}

	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

template <typename T, typename LCType>
inline xdrstream::Status LCStlVecHandler<T, LCType>::write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject)
{
	const LCType *const pLCStlVec = dynamic_cast<const LCType *const>(pLCObject);

	uint32_t nVals = pLCStlVec->size();
	XDR_STREAM( pDevice->write( & nVals ) )
	T value;

	for( uint32_t i=0 ; i<nVals ; i++ )
	{
		value = pLCStlVec->at( i );
		XDR_STREAM( pDevice->write( & value ) )
	}

	return xdrstream::XDR_SUCCESS;
}

} 

#endif  //  LCSTLVECHANDLER_H
