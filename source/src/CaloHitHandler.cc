  /// \file CaloHitHandler.cc
/*
 *
 * CaloHitHandler.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 17 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/CaloHitHandler.h"
#include "xdrlcio/ParticleIDHandler.h"

#include "IOIMPL/CalorimeterHitIOImpl.h"
#include "IMPL/LCFlagImpl.h"
#include "EVENT/LCIO.h"

namespace xdrlcio
{

class XdrCaloHit : public IOIMPL::CalorimeterHitIOImpl
{
	friend class CaloHitHandler;
};

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

xdrstream::Status CaloHitHandler::read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject)
{
	XdrCaloHit *pCaloHit = new XdrCaloHit();
	pLCObject = pCaloHit;

	IMPL::LCFlagImpl lcFlag( m_lcFlag );

	XDR_STREAM( pDevice->read<int32_t>( &pCaloHit->_cellID0 ) )

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_ID1 ) )
		XDR_STREAM( pDevice->read<int32_t>( &pCaloHit->_cellID1 ) )

	XDR_STREAM( pDevice->read<float>( &pCaloHit->_energy ) )

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_ENERGY_ERROR ) )
		XDR_STREAM( pDevice->read<float>( &pCaloHit->_energyError ) )

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_TIME ) )
		XDR_STREAM( pDevice->read<float>( &pCaloHit->_time ) )

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_LONG ) )
		XDR_STREAM( pDevice->readStaticArray<float>( &pCaloHit->_position[0] , 3 ) )

	XDR_STREAM( pDevice->read<int32_t>( &pCaloHit->_type ) )
	XDR_STREAM( pDevice->readPointerReference( (void **) &pCaloHit->_rawHit ) )

	if( ! lcFlag.bitSet( EVENT::LCIO::RCHBIT_NO_PTR ) )
		XDR_STREAM( pDevice->readPointerTag( (void *) pCaloHit ) )

	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status CaloHitHandler::write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject)
{
	const EVENT::CalorimeterHit *const pCaloHit = dynamic_cast<const EVENT::CalorimeterHit *const >(pLCObject);

	IMPL::LCFlagImpl lcFlag( m_lcFlag );

	int32_t cellID0 = pCaloHit->getCellID0();
	XDR_STREAM( pDevice->write<int32_t>( & cellID0 ) )

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_ID1 ) )
	{
		int32_t cellID1 = pCaloHit->getCellID1();
		XDR_STREAM( pDevice->write<int32_t>( & cellID1 ) )
	}

	float energy = pCaloHit->getEnergy();
	XDR_STREAM( pDevice->write<float>( & energy ) )

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_ENERGY_ERROR ) )
	{
		float energyError = pCaloHit->getEnergyError();
		XDR_STREAM( pDevice->write<float>( & energyError ) )
	}

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_TIME ) )
	{
		float time = pCaloHit->getTime();
		XDR_STREAM( pDevice->write<float>( & time ) )
	}

	if( lcFlag.bitSet( EVENT::LCIO::RCHBIT_LONG ) )
		XDR_STREAM( pDevice->writeArray<float>( pCaloHit->getPosition() , 3 ) )

	int32_t type = pCaloHit->getType();
	XDR_STREAM( pDevice->write<int32_t>( & type ) )

	XDR_STREAM( pDevice->writePointerReference( (void *) pCaloHit->getRawHit() ) )

	if( ! lcFlag.bitSet( EVENT::LCIO::RCHBIT_NO_PTR ) )
		XDR_STREAM( pDevice->writePointerTag( (void *) pCaloHit ) )

	return xdrstream::XDR_SUCCESS;
}

} 

