  /// \file LCObjectHandler.cc
/*
 *
 * LCObjectHandler.cc source template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/LCObjectHandler.h"
#include "xdrlcio/LCParametersHandler.h"

namespace xdrlcio
{

xdrstream::Status LCObjectHandler::init(xdrstream::IODevice *pDevice, xdrstream::StreamingMode mode,
		EVENT::LCCollection *pLCCollection, xdrstream::xdr_version_t version)
{
    if( xdrstream::XDR_READ_STREAM == mode )
    {
    	XDR_STREAM( pDevice->read(&m_lcFlag) )
		XDR_STREAM( LCParametersHandler::read( pDevice, pLCCollection->parameters() , version ) )

		pLCCollection->setFlag( m_lcFlag );
    	m_version = version;
    }
    else if( xdrstream::XDR_WRITE_STREAM == mode )
    {
    	m_lcFlag = pLCCollection->getFlag();

    	XDR_STREAM( pDevice->write(&m_lcFlag) )
    	XDR_STREAM( LCParametersHandler::write( pDevice, pLCCollection->parameters() ) )

		m_version = version;

    }

    return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status LCObjectHandler::readBase(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject)
{
    if( m_lcFlag & ( 1 << EVENT::LCCollection::BITSubset ) )
    {
    	// we only read the pointer
    	return pDevice->readPointerReference( (void **) &pLCObject );
    }
    else
    {
      return this->read( pDevice, pLCObject );
    }
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status LCObjectHandler::writeBase(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject)
{
    if( m_lcFlag & ( 1 << EVENT::LCCollection::BITSubset ) )
    {
    	// we only write the pointer
    	return pDevice->writePointerReference( pLCObject );
    }
    else
    {
      return this->write( pDevice, pLCObject );
    }
}

} 

