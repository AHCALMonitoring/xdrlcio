  /// \file LCRunHeaderBlock.cc
/*
 *
 * LCRunHeaderBlock.cc source template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/LCRunHeaderBlock.h"
#include "xdrlcio/LCParametersHandler.h"
#include "xdrlcioConfig.h"

namespace xdrlcio
{

LCRunHeaderBlock::LCRunHeaderBlock(xdrstream::XdrStream *pXdrStream, const std::string &name) :
		Block(pXdrStream, name),
		m_pLCRunHeader(0),
		m_pLCRunHeaderPtr(0)
{
	/* nop */
}

//----------------------------------------------------------------------------------------------------

void LCRunHeaderBlock::setRunHeader(const EVENT::LCRunHeader *pLCRunHeader)
{
	m_pLCRunHeader = pLCRunHeader;
}

//----------------------------------------------------------------------------------------------------

void LCRunHeaderBlock::setRunHeaderPtr(XdrLCRunHeader **pLCRunHeaderPtr)
{
	m_pLCRunHeaderPtr = pLCRunHeaderPtr;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status LCRunHeaderBlock::stream(xdrstream::StreamingMode mode, xdrstream::IODevice *pDevice, xdrstream::xdr_version_t version)
{
	if( this->getVersion() != version )
		return xdrstream::XDR_IO_ERROR;

	if( xdrstream::XDR_READ_STREAM == mode )
	{
		if( ! m_pLCRunHeaderPtr )
			return xdrstream::XDR_FAILURE;

		if( 0 == *m_pLCRunHeaderPtr )
			delete *m_pLCRunHeaderPtr;

		*m_pLCRunHeaderPtr = new XdrLCRunHeader();

		int32_t runNumber = 0;
		XDR_STREAM( pDevice->read( &runNumber ) )
		(*m_pLCRunHeaderPtr)->setRunNumber( runNumber );

		std::string detectorName;
		XDR_STREAM( pDevice->read( &detectorName ) )
		(*m_pLCRunHeaderPtr)->setDetectorName( detectorName );

		std::string description;
		XDR_STREAM( pDevice->read( &description ) )
		(*m_pLCRunHeaderPtr)->setDescription( description );

		uint32_t nActiveSubDet;
		XDR_STREAM( pDevice->read( &nActiveSubDet ) )

		for( uint32_t i=0 ; i<nActiveSubDet ; i++ )
		{
			std::string activeSubDet;
			XDR_STREAM( pDevice->read( &activeSubDet ) )
			(*m_pLCRunHeaderPtr)->addActiveSubdetector( activeSubDet );
		}

		XDR_STREAM( LCParametersHandler::read( pDevice , (*m_pLCRunHeaderPtr)->parameters() , version ) )
	}
	else
	{
		if( m_pLCRunHeader )
		{
			int32_t runNumber = m_pLCRunHeader->getRunNumber();
			XDR_STREAM( pDevice->write( &runNumber ) )

			std::string detectorName = m_pLCRunHeader->getDetectorName();
			XDR_STREAM( pDevice->write( &detectorName ) )

			std::string description = m_pLCRunHeader->getDescription();
			XDR_STREAM( pDevice->write( &description ) )

			const std::vector<std::string> *pActiveSubDets = m_pLCRunHeader->getActiveSubdetectors();
			uint32_t nActiveSubDet = pActiveSubDets->size();

			XDR_STREAM( pDevice->write<uint32_t>( &nActiveSubDet ) )

			for( uint32_t i=0 ; i<pActiveSubDets->size() ; i++ )
				XDR_STREAM( pDevice->write( &pActiveSubDets->at(i) ) )

				XDR_STREAM( LCParametersHandler::write( pDevice , (*m_pLCRunHeaderPtr)->parameters() ) )
		}
	}

	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::xdr_version_t LCRunHeaderBlock::getVersion() const
{
	return xdrlcio_VERSION;
}


} 

