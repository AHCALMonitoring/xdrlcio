  /// \file TrackerDataHandler.cc
/*
 *
 * TrackerDataHandler.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 17 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/TrackerDataHandler.h"
#include "xdrlcio/ParticleIDHandler.h"

#include "IOIMPL/TrackerDataIOImpl.h"
#include "IMPL/LCFlagImpl.h"
#include "EVENT/LCIO.h"

namespace xdrlcio
{

class XdrTrackerData : public IOIMPL::TrackerDataIOImpl
{
	friend class TrackerDataHandler;
};


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

xdrstream::Status TrackerDataHandler::read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject)
{
	XdrTrackerData *pTrackerData = new XdrTrackerData();
	pLCObject = pTrackerData;

	IMPL::LCFlagImpl lcFlag( m_lcFlag );

	XDR_STREAM( pDevice->read<int32_t>( &pTrackerData->_cellID0 ) )
	  
        if( lcFlag.bitSet( EVENT::LCIO::TRAWBIT_ID1 ) )
	  XDR_STREAM( pDevice->read<int32_t>( &pTrackerData->_cellID1 ) )
	    
	XDR_STREAM( pDevice->read<float>( &pTrackerData->_time ) )

	uint32_t ncharge;
	XDR_STREAM( pDevice->read( &ncharge ) )
	pTrackerData->_charge.resize( ncharge );
	XDR_STREAM( pDevice->readStaticArray( &pTrackerData->_charge[0] , ncharge ) )

        XDR_STREAM( pDevice->readPointerTag( (void*)pTrackerData ) )
   
	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status TrackerDataHandler::write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject)
{
	const EVENT::TrackerData *const pTrackerData = dynamic_cast<const EVENT::TrackerData *const >(pLCObject);

	IMPL::LCFlagImpl lcFlag( m_lcFlag );

	int32_t cellID0 = pTrackerData->getCellID0();
	XDR_STREAM( pDevice->write<int32_t>( & cellID0 ) )

	if( lcFlag.bitSet( EVENT::LCIO::TRAWBIT_ID1 ) )
	{
		int32_t cellID1 = pTrackerData->getCellID1();
		XDR_STREAM( pDevice->write<int32_t>( & cellID1 ) )
	}

	float time = pTrackerData->getTime();
	XDR_STREAM( pDevice->write<float>( & time ) )

	const EVENT::FloatVec &charge = pTrackerData->getChargeValues();
        uint32_t ncharge = charge.size();
        XDR_STREAM( pDevice->write( &ncharge ) )
	XDR_STREAM( pDevice->writeArray( &charge[0] , ncharge ) )

	XDR_STREAM( pDevice->writePointerTag( (void*)pTrackerData ) )

	return xdrstream::XDR_SUCCESS;
}

} 

