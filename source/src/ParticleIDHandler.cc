  /// \file ParticleIDHandler.cc
/*
 *
 * ParticleIDHandler.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 17 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/ParticleIDHandler.h"

namespace xdrlcio
{

xdrstream::Status ParticleIDHandler::read(xdrstream::IODevice *pDevice, EVENT::ParticleID *&pPID , xdrstream::xdr_version_t version)
{
	XdrParticleID *pParticleID = new XdrParticleID();
	pPID = pParticleID;

	XDR_STREAM( pDevice->read( &pParticleID->_likelihood ) )
	XDR_STREAM( pDevice->read( &pParticleID->_type ) )
	XDR_STREAM( pDevice->read( &pParticleID->_pdg ) )
	XDR_STREAM( pDevice->read( &pParticleID->_algorithmType ) )

	uint32_t nParams;
	XDR_STREAM( pDevice->read( &nParams ) )
	float aParameter;

	for( uint32_t j=0 ; j<nParams ; j++ )
	{
		XDR_STREAM( pDevice->read( &aParameter ) )
		pParticleID->addParameter( aParameter );
	}

	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status ParticleIDHandler::write(xdrstream::IODevice *pDevice, const EVENT::ParticleID *pParticleID)
{
	float likelihood = pParticleID->getLikelihood();
	XDR_STREAM( pDevice->write<float>( & likelihood ) )

	int32_t type = pParticleID->getType();
	XDR_STREAM( pDevice->write<int32_t>( & type ) )

	int32_t pdg = pParticleID->getPDG();
	XDR_STREAM( pDevice->write<int32_t>( & pdg ) )

	int32_t algorithmType = pParticleID->getAlgorithmType();
	XDR_STREAM( pDevice->write<int32_t>( & algorithmType ) )

	const EVENT::FloatVec &parameters( pParticleID->getParameters() );
	uint32_t nParams = parameters.size();
	XDR_STREAM( pDevice->write<uint32_t>( & nParams ) )

	for( uint32_t j=0 ; j<parameters.size() ; j++ )
		XDR_STREAM( pDevice->write<float>( & parameters.at(j) ) )

	return xdrstream::XDR_SUCCESS;
}


} 

