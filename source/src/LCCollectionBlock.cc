  /// \file LCCollectionBlock.cc
/*
 *
 * LCCollectionBlock.cc source template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/LCCollectionBlock.h"
#include "xdrlcio/LCObjectHandler.h"
#include "xdrlcio/LCEventHeaderBlock.h"
#include "xdrlcioConfig.h"

#include "IOIMPL/LCCollectionIOVec.h"

namespace xdrlcio
{

LCCollectionBlock::LCCollectionBlock(xdrstream::XdrStream *pXdrStream,
		const std::string &name, const std::string &type, LCObjectHandler *pLCObjectHandler) :
				Block(pXdrStream, name),
				m_type(type),
				m_pLCCollection(0),
				m_pLCEventPtr(0),
				m_pLCObjectHandler(pLCObjectHandler)
{

}

LCCollectionBlock::~LCCollectionBlock()
{

}

void LCCollectionBlock::setCollection(const EVENT::LCCollection *pLCCollection)
{
	m_pLCCollection = pLCCollection;
}

void LCCollectionBlock::setEventPtr(XdrLCEvent **pLCEventPtr)
{
	m_pLCEventPtr = pLCEventPtr;
}

xdrstream::Status LCCollectionBlock::stream(xdrstream::StreamingMode mode,
		xdrstream::IODevice *pDevice, xdrstream::xdr_version_t version)
{
	if( mode == xdrstream::XDR_READ_STREAM )
	{
		if( ! m_pLCEventPtr )
			return xdrstream::XDR_IO_ERROR;

		if( ! *m_pLCEventPtr )
			return xdrstream::XDR_IO_ERROR;

		IOIMPL::LCCollectionIOVec *pLCCollection = 0;

		try
		{
			pLCCollection = dynamic_cast<IOIMPL::LCCollectionIOVec*>( (*m_pLCEventPtr)->getCollection( this->getName() ));
		}
		catch(EVENT::Exception &exception)
		{
			std::cerr << "Couldn't stream (read) event. Collection " << this->getName() << " not available in event" << std::endl;
			return xdrstream::XDR_IO_ERROR;
		}

		XDR_STREAM( m_pLCObjectHandler->init( pDevice, mode , pLCCollection, version ) )

		uint32_t nObjects = 0;
		XDR_STREAM( pDevice->read( &nObjects ) )

		// resize the collection for easy read operation
		pLCCollection->resize( nObjects );

		// read all objects
		for( uint32_t i=0 ; i<nObjects ; i++ )
		{
			XDR_STREAM( m_pLCObjectHandler->readBase( pDevice , pLCCollection->operator[](i) ) )
		}
	}
	else if( mode == xdrstream::XDR_WRITE_STREAM )
	{
		if( m_pLCCollection )
		{
			XDR_STREAM( m_pLCObjectHandler->init( pDevice, mode , const_cast<EVENT::LCCollection *>(m_pLCCollection) , version ) )

			uint32_t nObjects = m_pLCCollection->getNumberOfElements();
			XDR_STREAM( pDevice->write( &nObjects ) )

			for( uint32_t i=0 ; i<nObjects ; i++ )
			{
				const EVENT::LCObject *const pLCObject = m_pLCCollection->getElementAt(i);
				XDR_STREAM( m_pLCObjectHandler->writeBase( pDevice , pLCObject ) )
			}
		}
	}

	return xdrstream::XDR_SUCCESS;
}

xdrstream::xdr_version_t LCCollectionBlock::getVersion() const
{
	return xdrlcio_VERSION;
}




} 

