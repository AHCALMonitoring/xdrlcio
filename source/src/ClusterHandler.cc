  /// \file ClusterHandler.cc
/*
 *
 * ClusterHandler.cc source template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 12 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/ClusterHandler.h"

#include "IOIMPL/ClusterIOImpl.h"

namespace xdrlcio
{

class XdrCluster : public IOIMPL::ClusterIOImpl
{
	friend class ClusterHandler;
};

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

xdrstream::Status ClusterHandler::read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject)
{
	XdrCluster *pCluster = new XdrCluster();
	pLCObject = pCluster;

	int32_t type;
	XDR_STREAM( pDevice->read<int32_t>( &type ) )
	pCluster->setType(type);

	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status ClusterHandler::write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject)
{
	const XdrCluster *const pCluster = dynamic_cast<const XdrCluster *const>( pLCObject );

	int32_t type = pCluster->getType();
	XDR_STREAM( pDevice->write<int32_t>( &type ) )

	return xdrstream::XDR_SUCCESS;
}

} 

