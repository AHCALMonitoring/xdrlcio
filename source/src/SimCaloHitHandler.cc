  /// \file SimCaloHitHandler.cc
/*
 *
 * SimCaloHitHandler.cc source template automatically generated by a class generator
 * Creation date : sam. fï¿½vr. 20 2016
 *
 * This file is part of xdrlcio libraries.
 * 
 * xdrlcio is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrlcio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrlcio.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrlcio/SimCaloHitHandler.h"

#include "IOIMPL/SimCalorimeterHitIOImpl.h"
#include "IMPL/LCFlagImpl.h"
#include "EVENT/LCIO.h"

namespace xdrlcio
{

class XdrSimCaloHit : public IOIMPL::SimCalorimeterHitIOImpl
{
	friend class SimCaloHitHandler;
};

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

xdrstream::Status SimCaloHitHandler::read(xdrstream::IODevice *pDevice, EVENT::LCObject *&pLCObject)
{
	XdrSimCaloHit *pCaloHit = new XdrSimCaloHit();
	pLCObject = pCaloHit;

	IMPL::LCFlagImpl lcFlag( m_lcFlag );

	XDR_STREAM( pDevice->read<int32_t>( & pCaloHit->_cellID0 ) )

	if( lcFlag.bitSet( EVENT::LCIO::CHBIT_ID1 ) )
		XDR_STREAM( pDevice->read<int32_t>( & pCaloHit->_cellID1 ) )

	XDR_STREAM( pDevice->read( & pCaloHit->_energy ) )

	if( lcFlag.bitSet( EVENT::LCIO::CHBIT_LONG ) )
		XDR_STREAM( pDevice->readStaticArray( pCaloHit->_position , 3 ) )

	uint32_t nMCConts;
	XDR_STREAM( pDevice->read( & nMCConts ) )

	for( uint32_t i=0 ; i<nMCConts ; i++ )
	{
		IMPL::MCParticleCont *pMCContribution = new IMPL::MCParticleCont();

		XDR_STREAM( pDevice->readPointerReference( (void **) & pMCContribution->Particle ) )
		XDR_STREAM( pDevice->read( & pMCContribution->Energy ) )
		XDR_STREAM( pDevice->read( & pMCContribution->Time ) )

		if( lcFlag.bitSet( EVENT::LCIO::CHBIT_PDG ) )
			XDR_STREAM( pDevice->read( & pMCContribution->PDG ) )

		if( lcFlag.bitSet( EVENT::LCIO::CHBIT_STEP ) )
		{
			XDR_STREAM( pDevice->readStaticArray( pMCContribution->StepPosition , 3 ) )
		}

		pCaloHit->_vec.push_back( pMCContribution );
	}

	XDR_STREAM( pDevice->readPointerTag( (void *) pCaloHit ) )

	return xdrstream::XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

xdrstream::Status SimCaloHitHandler::write(xdrstream::IODevice *pDevice, const EVENT::LCObject *const pLCObject)
{
	const EVENT::SimCalorimeterHit *const pCaloHit = dynamic_cast<const EVENT::SimCalorimeterHit *const>( pLCObject );

	IMPL::LCFlagImpl lcFlag( m_lcFlag );

	int32_t cellID0 = pCaloHit->getCellID0();
	XDR_STREAM( pDevice->write<int32_t>( & cellID0 ) )

	if( lcFlag.bitSet( EVENT::LCIO::CHBIT_ID1 ) )
	{
		int32_t cellID1 = pCaloHit->getCellID1();
		XDR_STREAM( pDevice->write<int32_t>( & cellID1 ) )
	}

	float energy = pCaloHit->getEnergy();
	XDR_STREAM( pDevice->write( & energy ) )

	if( lcFlag.bitSet( EVENT::LCIO::CHBIT_LONG ) )
		XDR_STREAM( pDevice->writeArray( pCaloHit->getPosition() , 3 ) )

	uint32_t nMCConts = pCaloHit->getNMCContributions();
	XDR_STREAM( pDevice->write( & nMCConts ) )

	for( uint32_t i=0 ; i<nMCConts ; i++ )
	{
		const EVENT::MCParticle *const pMCParticle = pCaloHit->getParticleCont( i );
		XDR_STREAM( pDevice->writePointerReference( (void *) pMCParticle ) )

		float energyCont = pCaloHit->getEnergyCont(i);
		XDR_STREAM( pDevice->write( & energyCont ) )

		float timeCont = pCaloHit->getTimeCont(i);
		XDR_STREAM( pDevice->write( & timeCont ) )

		if( lcFlag.bitSet( EVENT::LCIO::CHBIT_PDG ) )
		{
			int32_t pdgCont = pCaloHit->getPDGCont(i);
			XDR_STREAM( pDevice->write( & pdgCont ) )
		}

		if( lcFlag.bitSet( EVENT::LCIO::CHBIT_STEP ) )
			XDR_STREAM( pDevice->writeArray( pCaloHit->getStepPosition(i) , 3 ) )
	}

	XDR_STREAM( pDevice->writePointerTag( (void *) pCaloHit ) )

	return xdrstream::XDR_SUCCESS;
}


} 

